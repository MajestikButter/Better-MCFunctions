import{_ as e,c as t,o as r,a}from"./app.13718577.js";const p='{"title":"API - Logic","description":"","frontmatter":{"title":"API - Logic"},"headers":[{"level":2,"title":"Comparisons","slug":"comparisons"},{"level":2,"title":"Math","slug":"math"},{"level":2,"title":"Operators","slug":"operators"}],"relativePath":"API/Logic.md","lastUpdated":1642357270849}',l={},n=a('<h1 id="logic" tabindex="-1">Logic <a class="header-anchor" href="#logic" aria-hidden="true">#</a></h1><p>Reference for all logic handling systems, including math, operators, and comparisons</p><h2 id="comparisons" tabindex="-1">Comparisons <a class="header-anchor" href="#comparisons" aria-hidden="true">#</a></h2><p><code>equals(val0: any, val1: any): boolean</code></p><ul><li>Returns true if the arguments match</li></ul><p><code>not(val0: boolean): boolean</code></p><ul><li>Returns the inverse of the boolean</li><li>ex) true returns false, false returns true</li></ul><p><code>greaterThan(val0: number, val1: number): boolean</code></p><ul><li>Returns true if val0 is greater than val1</li></ul><p><code>greaterThanEqual(val0: number, val1: number): boolean</code></p><ul><li>Returns true if val0 is greater than or equal to val1</li></ul><p><code>lessThan(val0: number, val1: number): boolean</code></p><ul><li>Returns true if val0 is less than val1</li></ul><p><code>lessThanEqual(val0: number, val1: number): boolean</code></p><ul><li>Returns true if val0 is less than or equal to val1</li></ul><h2 id="math" tabindex="-1">Math <a class="header-anchor" href="#math" aria-hidden="true">#</a></h2><p><code>floor(val: number): number</code></p><ul><li>Returns the floored version of the number</li></ul><p><code>round(val: number): number</code></p><ul><li>Returns the rounded version of the number</li></ul><p><code>ceil(val: number): number</code></p><ul><li>Returns the ceiled version of the number</li></ul><p><code>trunc(val: number): number</code></p><ul><li>Returns the trunced version of the number</li></ul><p><code>clamp(val: number, min: number, max: number): number</code></p><ul><li>Returns the clamped version of the number between the minimum and maximum values (inclusive)</li></ul><p><code>min(...vals: number[]): number</code></p><ul><li>Returns the smallest number of the arguments</li></ul><p><code>max(...vals: number[]): number</code></p><ul><li>Returns the largest number of the arguments</li></ul><h2 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-hidden="true">#</a></h2><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>+</td><td>Adds the number on the right to the number on the left</td></tr><tr><td>-</td><td>Subtracts the number on the right from the number on the left</td></tr><tr><td>*</td><td>Multiplies the number on the left by the number on the right</td></tr><tr><td>/</td><td>Divides the number on the left by the number on the right</td></tr><tr><td>%</td><td>Divides the number on the left by the number on the right and returns the remainder</td></tr></tbody></table>',32),o=[n];function u(i,s,d,h,m,c){return r(),t("div",null,o)}var v=e(l,[["render",u]]);export{p as __pageData,v as default};
